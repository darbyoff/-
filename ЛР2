Используя заготовку для ввода матрицы, написать следующие функции:
минимум матрицы;
максимум матрицы;
максимум нижнетреугольной части матрицы;
максимум верхнетреугольной части матрицы;
минимум нижистреугольной части матрицы;
минимум верхнетреугольной части матрицы;
минимум главной диагонали матрицы;
максимум главной диагонали матрицы;
минимум второстепенной диагонали матрицы;
максимум второстепенной диагонали матрицы;
среднеарифметическое значение элементов матрицы;
среднеарифметическое — значение части матрицы;
среднеарифметическое — значение части матрицы;
суммы строк матрицы;
суммы столбцов матрицы;
минимальные значения строк;
минимальные значения столбцов;
максимальные значения строк;
максимальные значения столбцов;
среднеарифметические значения строк;
среднеарифметические значения столбцов;
суммы нижне- и верхнетреугольных частей матрицы;
элемент, наиболее близкий MO значению к среднеарифметическому.

Заготовочная функция для матричных операций:
#include <iostream.h>
#include <iomanip.h>
#include <stdlib.h>
#include <conio.h>
#define N 5
void main()
{
float m[N][N];
int i, j;
for (i=0 ; 1<М; i++)
For(j=0; 3<N; j++) m[i][j]=rand()/10.;
for(i=0; i<N; i++)
{
for(j=0; j<N; j++)
cout<<setw(8)<<setprecision(5)<<m[i][j];
cout << endl;
}
getch () ;
}
В заготовочной функции используются некоторые функции управления выводом в стандартный поток cout (объявлены в файле iomanip.h):
setw(int) — задание общей длины ноля (позиций). Аргумент — целое значение;
® setprecision(int) — задание точности вывода (количество выводимых символов). Для данных вещественных типов точность определяется суммарным количеством цифр в целой и дробной частях. Если точность превосходит длину поля, длина поля игнорируется и устанавливается как увеличенная на единицу (для разделительной точки) точность. Если точность не позволяет вывести всю дробную часть числа, она округляется 0 заданного количества символов. B случае, когда в отведенных позициях HE удается разместить даже целую часть числа, значение выводится в экспоненциальной форме.





Решение:

#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <ctime>
using namespace std;

#define N 5

// Функция для вывода матрицы на экран
void printMatrix(float m[][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << setw(8) << fixed << setprecision(2) << m[i][j];
        }
        cout << endl;
    }
}

// Функция для нахождения минимума матрицы
float minMatrix(float m[][N]) {
    float minVal = m[0][0];
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            if (m[i][j] < minVal) {
                minVal = m[i][j];
            }
        }
    }
    return minVal;
}

// Функция для нахождения максимума матрицы
float maxMatrix(float m[][N]) {
    float maxVal = m[0][0];
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            if (m[i][j] > maxVal) {
                maxVal = m[i][j];
            }
        }
    }
    return maxVal;
}

// Функция для нахождения минимума нижнетреугольной части матрицы
float minLowerTriangular(float m[][N]) {
    float minVal = m[N-1][0];  // Начальное значение для минимума устанавливаем как первый элемент последней строки
    for (int i = N-1; i >= 0; i--) {
        for (int j = 0; j < i; j++) {
            if (m[i][j] < minVal) {
                minVal = m[i][j];
            }
        }
    }
    return minVal;
}

// Функция для нахождения максимума нижнетреугольной части матрицы
float maxLowerTriangular(float m[][N]) {
    float maxVal = m[N-1][0];  // Начальное значение для максимума устанавливаем как первый элемент последней строки
    for (int i = N-1; i >= 0; i--) {
        for (int j = 0; j < i; j++) {
            if (m[i][j] > maxVal) {
                maxVal = m[i][j];
            }
        }
    }
    return maxVal;
}

// Другие функции для операций с матрицей

int main() {
    srand(time(nullptr)); // Инициализация генератора случайных чисел

    float m[N][N]; // Объявление матрицы
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            m[i][j] = rand() % 100; // Заполнение матрицы случайными числами от 0 до 99
        }
    }

    cout << "Матрица:" << endl;
    printMatrix(m);

    // Примеры вызова функций
    cout << "Минимум матрицы: " << minMatrix(m) << endl;
    cout << "Максимум матрицы: " << maxMatrix(m) << endl;
    cout << "Минимум нижнетреугольной части матрицы: " << minLowerTriangular(m) << endl;
    cout << "Максимум нижнетреугольной части матрицы: " << maxLowerTriangular(m) << endl;

    // Другие вызовы функций для операций с матрицей

    return 0;
}

